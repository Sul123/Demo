Здесь лежит код решения задачи о полной динамической связности онлайн в графе, выполненный в рамках домашнего задания по курсу Алгоритмов в шаде.

Реализован класс DynamicGraph со следующим интерфейсом:
`explicit DynamicGraph(int vertex_count);` — конструктор, принимающий количество вершин в графе.
`void AddEdge(int u, int v);` — метод, добавляющий ребро (u, v) в граф. 
`void RemoveEdge(int u, int v);` — метод, удаляющий ребро (u, v) из графа. 
`int GetComponentsNumber() const;` — метод, возвращающий число компонент связности в графе
`bool Connected(int u, int v);` - возвращает true, если вершины u и v лежат в одной компоненте связности, false - иначе

Алгоритм описан в приложенной статье в pdf. Он требует использования сбалансированных деревьев поиска по неявному ключу с возможностью слияния и разделения, для этого я выбрал Splay-дерево. 

Время работы каждого из методов можно оценить как O(log^2(n)) в учетном смысле, поэтому структуру можно использовать для онлайн запросов добавления/удаления ребер и почти моментального подсчета текущего числа компонент связности. 
